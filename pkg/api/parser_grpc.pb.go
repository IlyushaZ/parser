// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WebsiteClient is the client API for Website service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsiteClient interface {
	Add(ctx context.Context, in *AddWebsiteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type websiteClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsiteClient(cc grpc.ClientConnInterface) WebsiteClient {
	return &websiteClient{cc}
}

func (c *websiteClient) Add(ctx context.Context, in *AddWebsiteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.Website/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsiteServer is the server API for Website service.
// All implementations must embed UnimplementedWebsiteServer
// for forward compatibility
type WebsiteServer interface {
	Add(context.Context, *AddWebsiteRequest) (*empty.Empty, error)
	mustEmbedUnimplementedWebsiteServer()
}

// UnimplementedWebsiteServer must be embedded to have forward compatible implementations.
type UnimplementedWebsiteServer struct {
}

func (UnimplementedWebsiteServer) Add(context.Context, *AddWebsiteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedWebsiteServer) mustEmbedUnimplementedWebsiteServer() {}

// UnsafeWebsiteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsiteServer will
// result in compilation errors.
type UnsafeWebsiteServer interface {
	mustEmbedUnimplementedWebsiteServer()
}

func RegisterWebsiteServer(s grpc.ServiceRegistrar, srv WebsiteServer) {
	s.RegisterService(&_Website_serviceDesc, srv)
}

func _Website_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWebsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Website/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteServer).Add(ctx, req.(*AddWebsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Website_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Website",
	HandlerType: (*WebsiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Website_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/parser.proto",
}

// NewsClient is the client API for News service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsClient interface {
	Get(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*NewsResponse, error)
	Search(ctx context.Context, in *SearchNewsRequest, opts ...grpc.CallOption) (*NewsResponse, error)
}

type newsClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsClient(cc grpc.ClientConnInterface) NewsClient {
	return &newsClient{cc}
}

func (c *newsClient) Get(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*NewsResponse, error) {
	out := new(NewsResponse)
	err := c.cc.Invoke(ctx, "/api.News/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsClient) Search(ctx context.Context, in *SearchNewsRequest, opts ...grpc.CallOption) (*NewsResponse, error) {
	out := new(NewsResponse)
	err := c.cc.Invoke(ctx, "/api.News/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsServer is the server API for News service.
// All implementations must embed UnimplementedNewsServer
// for forward compatibility
type NewsServer interface {
	Get(context.Context, *GetNewsRequest) (*NewsResponse, error)
	Search(context.Context, *SearchNewsRequest) (*NewsResponse, error)
	mustEmbedUnimplementedNewsServer()
}

// UnimplementedNewsServer must be embedded to have forward compatible implementations.
type UnimplementedNewsServer struct {
}

func (UnimplementedNewsServer) Get(context.Context, *GetNewsRequest) (*NewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNewsServer) Search(context.Context, *SearchNewsRequest) (*NewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedNewsServer) mustEmbedUnimplementedNewsServer() {}

// UnsafeNewsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsServer will
// result in compilation errors.
type UnsafeNewsServer interface {
	mustEmbedUnimplementedNewsServer()
}

func RegisterNewsServer(s grpc.ServiceRegistrar, srv NewsServer) {
	s.RegisterService(&_News_serviceDesc, srv)
}

func _News_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.News/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).Get(ctx, req.(*GetNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _News_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.News/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServer).Search(ctx, req.(*SearchNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _News_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.News",
	HandlerType: (*NewsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _News_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _News_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/parser.proto",
}
